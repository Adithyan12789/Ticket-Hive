"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
require("reflect-metadata");
const AuthMiddleware_1 = require("../Middlewares/AuthMiddleware");
const UserMulter_1 = __importDefault(require("../Config/Multer/UserMulter"));
const Container_1 = require("../Config/Container");
const router = express_1.default.Router();
const userControllerr = Container_1.container.get("UserController");
const theaterControllerr = Container_1.container.get("TheaterController");
const bookingControllerr = Container_1.container.get("BookingController");
const notificationControllerr = Container_1.container.get("NotificationController");
const movieController = Container_1.container.get("MovieController");
const reviewControllerr = Container_1.container.get("ReviewController");
const walletControllerr = Container_1.container.get("WalletController");
const screenControllerr = Container_1.container.get("ScreenController");
router.post('/auth', userControllerr.authUser);
router.post('/googleLogin', userControllerr.googleLogin);
router.post('/signup', userControllerr.registerUser);
router.post('/verifyotp', userControllerr.verifyOTP);
router.post('/resend-otp', userControllerr.resendOtp);
router.post('/forgot-password', userControllerr.forgotPassword);
router.put('/reset-password/:token', userControllerr.resetPassword);
router.post('/refresh-token', userControllerr.refreshToken);
router.post('/save-location', AuthMiddleware_1.AuthMiddleware, userControllerr.saveLocationController);
router.route('/profile')
    .get(AuthMiddleware_1.AuthMiddleware, userControllerr.getUserProfile)
    .put(AuthMiddleware_1.AuthMiddleware, UserMulter_1.default.multerUploadUserProfile.single('profileImage'), userControllerr.updateUserProfile);
router.get('/get-movies', (req, res) => movieController.getAllMoviesController(req, res));
router.get('/movie-detail/:id', AuthMiddleware_1.AuthMiddleware, movieController.getMovieByIdHandler);
router.get('/reviews/:movieId', AuthMiddleware_1.AuthMiddleware, reviewControllerr.getReviewsController);
router.get('/allReviews', AuthMiddleware_1.AuthMiddleware, reviewControllerr.getAllReviewsController);
router.post('/reviews', AuthMiddleware_1.AuthMiddleware, reviewControllerr.addReviewsController);
router.get('/movie-theaters/:movieTitle', AuthMiddleware_1.AuthMiddleware, theaterControllerr.getTheatersByMovieTitle);
router.get('/screen/:screenId', AuthMiddleware_1.AuthMiddleware, screenControllerr.getScreensById);
router.post('/update-availability', AuthMiddleware_1.AuthMiddleware, screenControllerr.updateSeatAvailability);
router.get('/offers/:theaterId', AuthMiddleware_1.AuthMiddleware, userControllerr.getOffersByTheaterId);
router.post('/book-ticket', AuthMiddleware_1.AuthMiddleware, bookingControllerr.createBooking);
router.get('/get-tickets/:userId', AuthMiddleware_1.AuthMiddleware, bookingControllerr.getAllTickets);
router.get("/tickets/:ticketId", AuthMiddleware_1.AuthMiddleware, bookingControllerr.getTicketDetails);
router.post('/cancel-ticket/:bookingId', AuthMiddleware_1.AuthMiddleware, bookingControllerr.cancelTicket);
router.get('/notifications/unread', AuthMiddleware_1.AuthMiddleware, notificationControllerr.getUnreadNotifications);
router.put('/notifications/:id/read', AuthMiddleware_1.AuthMiddleware, notificationControllerr.markNotificationAsRead);
router.delete('/clearNotifications', AuthMiddleware_1.AuthMiddleware, notificationControllerr.clearNotifications);
router.post('/create-wallet-transaction', AuthMiddleware_1.AuthMiddleware, walletControllerr.addMoneyToWallet);
router.get('/transaction-history/:userId', AuthMiddleware_1.AuthMiddleware, walletControllerr.getTransactionHistory);
router.post('/logout', userControllerr.logoutUser);
exports.default = router;
